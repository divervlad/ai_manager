import os
import time
from collections import defaultdict
from dotenv import load_dotenv
import requests
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
import openai
from rapidfuzz import fuzz, process
from knowledge_base import context_data

load_dotenv()

VK_API_VERSION = os.getenv("VK_API_VERSION")
VK_GROUP_TOKEN = os.getenv("VK_GROUP_TOKEN")
VK_CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_PHONE = os.getenv("ADMIN_PHONE", "8989898989")
ADMIN_VK_ID = int(os.getenv("ADMIN_VK_ID", 0))  # –∞–π–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (0 ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

app = FastAPI()

ADMIN_KEYWORDS = [
    "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –∞–¥–º–∏–Ω–æ–º",
    "—Å–≤—è–∂–∏—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "–Ω—É–∂–µ–Ω –∞–¥–º–∏–Ω", "—Ö–æ—á—É –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
]

# ----------- –ê–ù–¢–ò–°–ü–ê–ú (NEW) -----------
user_message_log = defaultdict(list)
blocked_users = {}

SPAM_TIME_WINDOW = 30      # —Å–µ–∫—É–Ω–¥
SPAM_MESSAGE_LIMIT = 5     # —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
BLOCK_TIME = 300           # 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

def is_spamming(user_id):
    now = time.time()
    message_times = user_message_log[user_id]
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    message_times = [t for t in message_times if now - t < SPAM_TIME_WINDOW]
    user_message_log[user_id] = message_times
    user_message_log[user_id].append(now)
    if len(user_message_log[user_id]) > SPAM_MESSAGE_LIMIT:
        blocked_users[user_id] = now
        return True
    return False

def is_user_blocked(user_id):
    blocked_time = blocked_users.get(user_id)
    if blocked_time and (time.time() - blocked_time < BLOCK_TIME):
        return True
    elif blocked_time:
        del blocked_users[user_id]  # —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
    return False

def notify_admin_spam(user_id, group_id):
    dialog_url = f"https://vk.com/gim{group_id}?sel={user_id}"
    msg = (
        f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º.\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ.\n"
        f"{dialog_url}"
    )
    send_vk_message(ADMIN_VK_ID, group_id, msg)

# ----------- /–ê–ù–¢–ò–°–ü–ê–ú -----------

def get_context(group_id):
    return context_data.get(str(group_id), {})

def fuzzy_find_answer(group_id, message, min_score=80):
    ctx = get_context(group_id)
    faq = ctx.get("faq", [])
    questions = [item["q"] for item in faq]
    result = process.extractOne(message, questions, scorer=fuzz.token_set_ratio)
    if result:
        print(f"Fuzzy search: input='{message}' | match='{result[0]}' | score={result[1]}")
    if result and result[1] >= min_score:
        idx = questions.index(result[0])
        return faq[idx]["a"]
    return None

def gpt_support_answer(context, message):
    if not OPENAI_API_KEY:
        print("–ù–µ—Ç –∫–ª—é—á–∞ OpenAI.")
        return None

    prompt = (
        f"–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π —á–∞—Ç-–±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã \"{context.get('company_name', '–∫–æ–º–ø–∞–Ω–∏—è')}\". "
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.get('description', '')}\n"
        f"–¢–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç: \"{message}\"\n"
        f"–û—Ç–≤–µ—Ç—å –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã. "
        f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å, –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ: '–Ø —á–∞—Ç-–±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã. "
        f"–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞, –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏! –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'"
    )
    try:
        print("–í–´–ó–´–í–ê–Æ GPT –° prompt:", prompt)
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        print("RAW GPT RESPONSE:", response)
        reply = response.choices[0].message.content.strip() if response.choices else None
        print("–û–¢–í–ï–¢ GPT:", reply)
        return reply
    except Exception as e:
        print(f"GPT ERROR: {e}")
        return None

def send_vk_message(user_id, group_id, message):
    data = {
        "user_id": user_id,
        "random_id": 0,
        "message": message,
        "access_token": VK_GROUP_TOKEN,
        "v": VK_API_VERSION,
        "group_id": group_id,
    }
    try:
        r = requests.post("https://api.vk.com/method/messages.send", data=data)
        print(f"VK MESSAGE SENT TO {user_id}: {r.text}")
    except Exception as e:
        print(f"VK SEND ERROR: {e}")

def send_admin_alert(user_id, group_id, user_message):
    dialog_url = f"https://vk.com/gim{group_id}?sel={user_id}"
    msg = (
        f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        f"[id{user_id}|–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É]\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{user_message}\"\n"
        f"{dialog_url}"
    )
    send_vk_message(ADMIN_VK_ID, group_id, msg)

def is_admin_call(text):
    text = text.lower()
    for key in ADMIN_KEYWORDS:
        if key in text:
            return True
    return False

@app.get("/vk_callback")
async def vk_callback_get():
    return PlainTextResponse("ok")

@app.post("/vk_callback")
async def vk_callback(req: Request):
    try:
        body = await req.json()
        print("VK CALLBACK BODY:", body)
        if body.get("type") == "confirmation":
            return PlainTextResponse(VK_CONFIRMATION_TOKEN)

        if body.get("type") == "message_new":
            group_id = body.get("group_id")
            user_id = body["object"]["message"].get("from_id")
            text = body["object"]["message"].get("text", "")
            print(f"New message from user {user_id} in group {group_id}: {text}")

            # ------ –ê–ù–¢–ò–°–ü–ê–ú ------
            if is_user_blocked(user_id):
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º.")
                return PlainTextResponse("ok")
            if is_spamming(user_id):
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å—Ç–∞–≤–∏–º —á–∞—Ç –Ω–∞ –ø–∞—É–∑—É.")
                notify_admin_spam(user_id, group_id)
                send_vk_message(user_id, group_id, "–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                return PlainTextResponse("ok")
            # ------ /–ê–ù–¢–ò–°–ü–ê–ú ------

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if is_admin_call(text):
                print("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
                send_admin_alert(user_id, group_id, text)
                send_vk_message(user_id, group_id, "–°–æ–µ–¥–∏–Ω—è—é —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
                return PlainTextResponse("ok")

            # 2. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            ctx = get_context(group_id)
            answer = fuzzy_find_answer(group_id, text)
            print("–û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:", answer)
            # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –∫–∞–∫ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if not answer:
                print("–ë–∞–∑–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞, –ø—Ä–æ–±—É–µ–º GPT.")
                answer = gpt_support_answer(ctx, text)
            # 4. –ï—Å–ª–∏ GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞
            if not answer or len(answer.strip()) == 0:
                print("GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞, –¥–µ—Ñ–æ–ª—Ç.")
                answer = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É {ADMIN_PHONE}."
            send_vk_message(user_id, group_id, answer)
            return PlainTextResponse("ok")
        return PlainTextResponse("ok")
    except Exception as e:
        print(f"ERROR VK_CALLBACK: {e}")
        return PlainTextResponse("ok")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
