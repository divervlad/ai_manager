import os
import time
from collections import defaultdict
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

load_dotenv()

VK_API_VERSION = os.getenv("VK_API_VERSION")
VK_GROUP_TOKEN = os.getenv("VK_GROUP_TOKEN")
VK_CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION_TOKEN")
ADMIN_VK_ID = int(os.getenv("ADMIN_VK_ID", 0))

app = FastAPI()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ user_id
user_message_log = defaultdict(list)
blocked_users = {}

# –ü–æ—Ä–æ–≥ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
SPAM_TIME_WINDOW = 30  # —Å–µ–∫—É–Ω–¥
SPAM_MESSAGE_LIMIT = 5  # —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è

def is_spamming(user_id: int) -> bool:
    now = time.time()
    message_times = user_message_log[user_id]

    # –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_times = [t for t in message_times if now - t < SPAM_TIME_WINDOW]
    user_message_log[user_id] = message_times

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_message_log[user_id].append(now)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if len(user_message_log[user_id]) > SPAM_MESSAGE_LIMIT:
        blocked_users[user_id] = now  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        return True
    return False

def is_user_blocked(user_id: int) -> bool:
    blocked_time = blocked_users.get(user_id)
    if blocked_time and (time.time() - blocked_time < 300):  # 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        return True
    elif blocked_time:
        del blocked_users[user_id]  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
    return False

def notify_admin(user_id: int):
    message = f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é."
    requests.post("https://api.vk.com/method/messages.send", params={
        "access_token": VK_GROUP_TOKEN,
        "v": VK_API_VERSION,
        "user_id": ADMIN_VK_ID,
        "message": message,
        "random_id": int(time.time())
    })

@app.post("/vk_callback")
async def handle_event(request: Request):
    data = await request.json()
    if "type" not in data:
        return PlainTextResponse("ok")

    if data["type"] == "confirmation":
        return PlainTextResponse(VK_CONFIRMATION_TOKEN)

    if data["type"] == "message_new":
        user_id = data["object"]["message"]["from_id"]

        if is_user_blocked(user_id):
            return PlainTextResponse("ok")

        if is_spamming(user_id):
            notify_admin(user_id)
            send_message(user_id, "–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return PlainTextResponse("ok")

        user_message = data["object"]["message"]["text"].lower()
        # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞
        send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

    return PlainTextResponse("ok")

def send_message(user_id: int, text: str):
    requests.post("https://api.vk.com/method/messages.send", params={
        "access_token": VK_GROUP_TOKEN,
        "v": VK_API_VERSION,
        "user_id": user_id,
        "message": text,
        "random_id": int(time.time())
    })
